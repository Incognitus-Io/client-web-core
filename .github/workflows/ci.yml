# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Continuous Integration

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
  create:
    tags:
      - "v*"

env:
  CACHE_BUSTER: 1

jobs:
  test:
    runs-on: ubuntu-18.04
    if: "! contains(toJSON(github.event.commits.*.message), '[skip-ci]')"

    env:
      NODE_ENV: test

    steps:
      - name: Use Node.js 14
        uses: actions/setup-node@v1
        with:
          node-version: 14

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: Package cache
        uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-v${{ env.CACHE_BUSTER }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-v${{ env.CACHE_BUSTER }}-

      - uses: actions/checkout@v2
      - run: yarn install --frozen-lockfile
      - run: yarn lint
        env:
          NODE_ENV: production
      - run: yarn test:ci
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v1
        env:
          NODE_VER: 14
        with:
          env_vars: NODE_VER
          path_to_write_report: ./coverage/codecov_report.txt
          verbose: true
      - name: Persisting coverage
        uses: actions/upload-artifact@v2
        with:
          name: coverage
          path: coverage/lcov-report/

  deploy-next:
    runs-on: ubuntu-18.04
    needs: test
    if: github.ref == 'refs/heads/master'

    env:
      NODE_ENV: production

    steps:
      - name: Use Node.js
        uses: actions/setup-node@v1
        with:
          node-version: "14.x"

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: Package cache
        uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-v${{ env.CACHE_BUSTER }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-v${{ env.CACHE_BUSTER }}-

      - uses: actions/checkout@v2

      - run: yarn install --frozen-lockfile --production=false
      - name: Build library
        run: yarn build

      - name: Generate version
        id: pkg-info
        run: |
          git clone --bare ${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY} ../metadata
          pushd ../metadata

          latestTag=$(git rev-list --tags --max-count=1)
          firstCommit=$(git rev-list --max-parents=0 HEAD)
          build="$(git rev-list --count ${latestTag:=${firstCommit}}..HEAD)"

          popd
          version="$(yarn -s json -f package.json version)-pre.${build}"

          echo ::set-output name=version::${version}

      - name: Prep package.json for release
        env:
          PKG_VERSION: ${{ steps.pkg-info.outputs.version }}
        run: |
          yarn json -I -f package.json -e "this.version='${PKG_VERSION}'"
          yarn json -I -f package.json -e "this.scripts=undefined"
          yarn json -I -f package.json -e "this.devDependencies=undefined"

      - name: Setup npmjs.com
        uses: actions/setup-node@v1
        with:
          registry-url: "https://registry.npmjs.org"
          scope: "@incognitus"
      - name: Deploy to npmjs.com
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          PKG_VERSION: ${{ steps.pkg-info.outputs.version }}
        run: yarn publish --access public --tag next --no-git-tag-version --new-version $PKG_VERSION

  deploy-latest:
    runs-on: ubuntu-18.04
    needs: test
    if: startsWith(github.ref, 'refs/tags/v')

    env:
      NODE_ENV: production

    steps:
      - name: Use Node.js
        uses: actions/setup-node@v1
        with:
          node-version: "14.x"

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: Package cache
        uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-v${{ env.CACHE_BUSTER }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-v${{ env.CACHE_BUSTER }}-

      - uses: actions/checkout@v2

      - run: yarn install --frozen-lockfile --production=false
      - name: Build library
        run: yarn build

      - name: Generate version
        id: pkg-info
        run: echo ::set-output name=version::${GITHUB_REF#refs/tags/v}

      - name: Prep package.json for release
        env:
          PKG_VERSION: ${{ steps.pkg-info.outputs.version }}
        run: |
          yarn json -I -f package.json -e "this.version='${PKG_VERSION}'"
          yarn json -I -f package.json -e "this.scripts=undefined"
          yarn json -I -f package.json -e "this.devDependencies=undefined"

      - uses: actions/setup-node@v1
        with:
          registry-url: "https://registry.npmjs.org"
          scope: "@incognitus"
      - name: Deploy to npmjs.com
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          PKG_VERSION: ${{ steps.pkg-info.outputs.version }}
        run: yarn publish --access public --no-git-tag-version --new-version $PKG_VERSION
